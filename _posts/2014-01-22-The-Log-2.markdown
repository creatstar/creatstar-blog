---
layout: post
title:  "The Log: What every software engineer should know about real-time data's unifying abstraction (2)"
date:   2014-01-22 08:52:00
categories: architecture
---
上一部分链接:[The Log: What every software engineer should know about real-time data's unifying abstraction (1)][_log_1]

[_log_1]: http://creatstar.com/architecture/2014/01/18/The-Log-1.html

#### Changelog 101: Tables and Events are Dual

Let's come back to databases for a bit. There is a facinating duality between a log of changes and a table. The log is similar to the list of all credits and debits and bank processes; a table is all the current account balances. If you have a log of changes, you can apply these changes in order to create the table capturing the current state. This table will record the latest state for each key (as of a particular log time). There is a sense in which the log is the more fundamental data structure: in addition to creating the original table you can also transform it to create all kinds of derived tables. (And yes, table can mean keyed data store for the non-relational folks.)
>以银行的运行为例，log的作用类似于银行对账号的各种操作记录，table类似于银行账号的最终状态。由于可以使用各条操作记录获得最终的账号状态，所以log是一个更加重要的数据结构。

This process works in reverse too: if you have a table taking updates, you can record these changes and publish a "changelog" of all the updates to the state of the table. This changelog is exactly what you need to support near-real-time replicas. So in this sense you can see tables and events as dual: tables support data at rest and logs capture change. The magic of the log is that if it is a complete log of changes, it holds not only the contents of the final version of the table, but also allows recreating all other versions that might have existed. It is, effectively, a sort of backup of every previous state of the table.
>处理记录也是类似，使用changelog所记录的对于table状态的所有更新，正是实时备份所需要的信息。

This might remind you of source code version control. There is a close relationship between source control and databases. Version control solves a very similar problem to what distributed data systems have to solve—managing distributed, concurrent changes in state. A version control system usually models the sequence of patches, which is in effect a log. You interact directly with a checked out "snapshot" of the current code which is analogous to the table. You will note that in version control systems, as in other distributed stateful systems, replication happens via the log: when you update, you pull down just the patches and apply them to your current snapshot.
>这个过程也和源代码的版本控制的过程类似。

Some people have seen some of these ideas recently from Datomic, a company selling a log-centric database. This presentation gives a great overview of how they have applied the idea in their system. These ideas are not unique to this system, of course, as they have been a part of the distributed systems and database literature for well over a decade.
>这里作者提到了一个log-centric的数据库，Datomic。该数据库是Clojure的作者Rich Hickey设计的，这里有两份设计相关的文档：[《Datomic的架构》][_datomic_arch]，[Datomic信息模型][_datomic_model]。从相关文档来看，Rich把一些函数式编程中的基础概念用到了数据库的设计里。如：“提供可靠的信息模型，而避免原地更新”。原文作者所谓的“log-centric”可能指的也是这个概念。另外Datomic试图做得非常灵活，如，它可以支持多种数据持久化方式（使用不同类型的其他数据库做为存储，包括一些KV存储引擎），并且不局限于只提供SQL的操作接口，强调“数据即接口，系统应该是可编程的。”由于本人对函数式编程还是一知半解，所以不多评论了。

[_datomic_arch]: http://www.infoq.com/cn/articles/Architecture-Datomic
[_datomic_model]: http://www.infoq.com/cn/articles/Datomic-Information-Model

This may all seem a little theoretical. Do not despair! We'll get to practical stuff pretty quickly.

####What's next

In the remainder of this article I will try to give a flavor of what a log is good for that goes beyond the internals of distributed computing or abstract distributed computing models. This includes:

1. Data Integration—Making all of an organization's data easily available in all its storage and processing systems.
2. Real-time data processing—Computing derived data streams.
3. Distributed system design—How practical systems can by simplified with a log-centric design.

These uses all resolve around the idea of a log as a stand-alone service.

In each case, the usefulness of the log comes from simple function that the log provides: producing a persistent, re-playable record of history. Surprisingly, at the core of these problems is the ability to have many machines playback history at their own rate in a deterministic manner.

###Part Two: Data Integration

Let me first say what I mean by "data integration" and why I think it's important, then we'll see how it relates back to logs.

* Data integration is making all the data an organization has available in all its services and systems.

This phrase "data integration" isn't all that common, but I don't know a better one. The more recognizable term ETL usually covers only a limited part of data integration—populating a relational data warehouse. But much of what I am describing can be thought of as ETL generalized to cover real-time systems and processing flows.